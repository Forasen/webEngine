计算机应用研究
APPLICATION RESERCH OF COMPUTERS
2000  Vol.17　No.1　P.106-108




在Windows95环境下开发虚拟设备驱动程序
赫江华　熊莺　韦峰　周一勤
摘 要 讲述了VxD产生的背景，通过描述VxD与虚拟机、虚拟机管理器之间的关系阐明了VxD的作用，并详细介绍了VxD的工作原理和开发过程。最后给出了一个VxD程序实例梈Packet.vxd。
关键词 VMM VM VxD DDB DCP Service Table API
1 引言
1.1 Windows95的结构及虚拟环境
　　为了保证应用软件能在多种平台上运行，Windows95除了支持Win16位和Win32位应用程序外，还支持MS-DOS应用程序的运行，成为一个完整的32位多任务抢占式操作系统。Win95操作系统之所以有较强的兼容性，它是通过在层次式体系结构中建构一个虚拟环境实现的。
　　Win95的结构组件包括三个：虚拟机(Virtual Machine)、虚拟机管理器(Virtual Machine Manager)、虚拟设备驱动程序(VxD)。在Win95下应用程序是在虚拟机中执行的，虚拟机有两种，它们是MS-DOS虚拟机和系统虚拟机。每个虚拟机都可运行DOS应用程序，一个DOS虚拟机中只运行一个DOS应用程序，而所有的Windows应用程序和DLL都可在系统虚拟机中运行。虚拟机的好处是：每个虚拟机都有独立的地址空间、I/O空间、寄存器、堆栈、局部描述符表、中断向量表和执行优先权，多个虚拟机可同时同步工作，互不干扰。它们对用户来说是透明的，每个虚拟机可使用全部的系统资源，并虚拟地控制了整个系统。虚拟管理器在Windows虚拟环境处于核心地位，它的作用是产生、卸载虚拟机，协调和调度各虚拟机的工作，并作为虚拟机和虚拟设备驱动程序打交道的接口，以及负责虚拟内存的管理等工作。由于每个虚拟机都可使用系统的所有软硬件资源，这就存在资源怎样被无冲突共享的问题。为解决此问题，Win95把各硬件设备抽象成一个个的虚拟设备，用户若要访问底层硬件，则实际上是访问这些虚拟设备驱动程序VxD。也就是说，它是虚拟机上运行的任务和各软硬件资源之间的接口。
1.2 VxD的定义及它与Windows95各部分之间的关系
　　在Win16位的版本中，整个加载设备驱动程序的过程是：系统在启动时，Windows寻找SYSTEM.INI文件，读出此文件中[386nh]节的内容，此节的格式是device=xxxx驱动程序。这样设备驱动程序在系统初始化时被加载。这带来了三个问题，(1)无论此设备驱动程序需不需要，所有设备驱动程序都将在初始化时加载。(2)一旦设备驱动程序加载，就不能被卸载。(3)系统文件SYSTEM.INI中的内容无法自动地和实际的硬件环境保持一致，此一致性需程序或用户来维护。第一个和第二个问题所带来的缺点是系统资源被浪费。VxD起始于Windows 386增强模式，它是Win95为解决这一问题而加入的。VxD的全称是Virtual Device Driver，其中的x是设备名的统称，如虚拟鼠标设备驱动程序称为VMD，虚拟显示设备是VDD等等，这些VxD文件使得设备虚拟化。95动态地检测硬件配置并自动地加载合适的设备驱动程序，并可动态地卸载、重载不同的虚拟设备驱动程序。
　　虚拟机、虚拟机管理程序与VxD之间的关系可用图1表示。

图1　VM、VMM、VXD关系图
　　虚拟机管理器和VxD的集合构成Win9x系统的核心，而VxD和VMM之间的关系又是十分紧密的。VMM是一个特殊的VxD，VxD以DLL的形式链入Windows操作系统的核心层(0环)，VxD在VMM的监控下运行，两者的协作使VxD具有应用程序所不具备的能力，这些特殊的能力包括(1)不受任何限制地访问硬件设备；(2)访问任何的内存区域。例如，在保护模式下访问绝对物理地址是个很麻烦的问题，可通过编写访问物理地址的VxD解决此问题；(3)任意查看操作系统的数据结构；(4)捕获软件中断、截取硬件中断、捕获I/O端口操作。
1.3 VxD的功能及作用
　　在一般情况下，VxD的作用是用来支持硬件设备管理的，是虚拟化的某一具体硬件的设备驱动程序。其功能是向应用程序提供与硬件接口的环境，用以同步和协调各虚拟机对设备的访问，并可以向其它的VxD提供服务，还能为实模式软件提供应用程序编程接口。而VxD的作用不仅仅限于此，它还可作为设备驱动程序而不是虚拟化设备，还有些VxD与硬件设备并没有什么关系，它仅向其它的VxD或应用程序提供服务。这样软件在虚拟机上运行时并不认为虚设备和实设备有什么不同，在软件一级看来它们是完全一样的。
1.4 虚拟设备驱动程序的运行环境
　　虚拟设备驱动程序是针对Windows 9x以下平台的，此种将设备虚拟化的机制使各提供商能为特定的硬件设备编写驱动程序，这样不同类型的设备就可用一种标准方式加以处理。需要注意的是Windows操作系统的多个版本所采用的核心技术是不同的，而且它们的体系结构发生了众多的变化，这样不同的Windows操作系统编制虚拟设备驱动程序的方法是不同的。然而各Windows版本在底层结构上没有太大的变化，所以为Win3.x编写的设备驱动程序基本可不加修改就可在Win95或Win98平台下工作。
2 VxD的结构与运行原理
2.1 结构
　　一个标准的VxD由5部分组成，这5个部分分别存放在5个不同的段中：
　　VxD_CODE(必须段) 保护模式代码段，包括虚拟设备的设备控制过程(DCP)、回调函数、服务例程和API函数。设备控制过程接收VMM的消息，并决定对消息的反应；VxD服务例程是一批由其它VxD可使用的函数，以使其它VxD可访问本VxD控制的资源；VxD的API函数是一批可以由实模式和保护式任务调用的函数，应用程序可以通过INT 2FH得到API的入口点，并调用这些API函数，以实现对设备的访问。大多数应用程序是通过这种方式访问设备的。编程时用VxD_CODE_SEG和VxD_CODE_END宏定义此段，这一段也叫做_LTEXT。
　　VxD_DATA(必须段) 保护模式数据段，包括虚拟设备的设备描述块(DDB)，由各服务例程地址构成的服务表以及虚拟设备使用的全局数据。DDB(Device Descriptor Block)保存了VxD的关键信息，包括：设备名、DCP地址、版本号、初始化顺序以及API函数的地址，这些信息对VxD、VMM及VM上运行的任务，都是至关重要的。编程时，使用VxD_DATA_SEG和VxD_DATA_ENDS来定义。这一段也叫做_LDATA。
　　VxD_ICODE(可选段) 保护模式初始化代码段，通常包括仅用于虚拟设备初始化阶段的过程和服务。在这里VxD响应VMM在三个阶段发送的三条初始化消息，并进行响应阶段的初始化操作。VMM在发送消息Init_Complete后丢弃该段。编程时，使用VxD_ICODE_SEG和VxD_ICODE_ENDS来定义。这一段也叫做_ITEXT
　　VxD_IDATA(可选段) 保护模式初始化数据段，通常包括虚拟设备在初始化过程和服务中使用的数据。VMM在发送消息Init_Complete后丢弃该段。编程时，使用VxD_IDATA_SEG和VxD_IDATA_ENDS来定义。这一段也叫做_IDATA。
　　VxD_REAL_INIT(可选段) 实模式初始化段，包括虚拟设备初始化过程和初始化用到的数据。在这个段中一般存放运行环境检测以及资源判断等语句，并进行相应阶段的初始化操作。VMM在加载虚拟设备的其余段之前调用此过程，然后在过程返回后丢弃该段。编程时，使用VxD_REAL_INIT_SEG和VxD_REAL_INIT_ENDS来定义。这一段也叫做_RTEXT。
2.2 运行原理
2.2.1 VxD的初始化过程
　　每个VxD的初始化过程是不同的，而且模式不同过程也不同。总的说来，过程大致是：Windows在初始化时，每一个VxD按照设备描述块中定义的初始化顺序进行初始化工作。一般说来，应当按照优先级顺序或装入顺序初始化VxD。VxD的INITVxD的装载与初始化是由VMM来完成，VMM通过调用VxD中定义的实模式与保护模式初始化过程来完成VxD的初始化。VMM按照以下步骤进行VxD初始化。
　　1)装入VxD实模式初始化段，调用实模式初始化过程。这个过程判断VxD是否装入，Windows是否启动，指定虚拟设备所需的实例数据，在内存中选择虚拟设备所需的独占使用的页。
　　2)在32位单层模型的保护模式内存中装入虚拟设备的其余段，并丢弃实模式初始化段。
　　3)VMM将各VxD按其InitOrder值排序，分别进行初始化。
　　4)发送Sys_Critical_Init消息给设备控制过程，此时硬件中断被禁止。
　　5)发送Device_Init消息给设备控制过程，此时可允许硬件中断。因此虚拟设备必须管理来自硬件的中断。
　　6)发送Init_Complete消息给设备控制过程。
　　7)丢弃初始化代码和数据段，释放用于其它目的的内存。因此虚拟设备在处理Init_Complete消息后不能再存取这些段中的过程和数据。
　　在初始化阶段的任何时刻，VxD都可通过设置标志位告诉VMM终止VxD的装入。VMM完成每个VxD的初始化后，才开始对Windows其它模块(GUI等)的装入执行。
2.2.2 VxD提供的服务与API函数
　　VxD提供的服务是VMM或某一特定的VxD提供的函数。这些服务可由其他VxD使用。在VxD的DDB中有两个字段指定了该VxD提供的服务，一个是DDB_Service_Table_Ptr，它指向服务表的指针，另一个是DDB_Service_Table_Size，它是服务入口表的项数。VxD提供的服务函数在服务表中定义，这些服务可通过VMMCall或VxDCALL宏来调用。VxD提供的第一个函数应该是Get_Vercion函数，以供调用者确认VxD的有效性。
　　VxD的API过程地址在DDB表中定义，通过提供API函数，VxD为实模式和保护模式下运行的任务提供正确访问设备的手段。
　　VxD在被正确初始化载入后，一个运行在虚拟机上要和系统软硬件打交道的程序对设备的访问过程是：(1)此程序发出访问请求，这个请求经过各种渠道最后到达虚拟机管理器。(2)VMM将请求解释后传给该设备的VxD。(3)VxD对请求进行理解，协调处理当前状态后将请求发送给物理设备。(4)物理设备返回的数据由VxD传给VMM，VMM再传递给虚拟机上的程序。
3 如何编写虚拟设备驱动程序
3.1 VxD的开发步骤
　　以前的VxD全部是用Intel汇编语言编写，目的是为了提高速度。现在，VxD可用C++类库编写，而且各软件公司都提供了开发VxD的工具包，例如，VtoolsD for Win95开发工具包。
　　创建虚拟设备可有两种方法，一种是直接对样例设备进行修改，另一种是重新编写一个虚拟设备。
　　创建虚拟设备的步骤包括：
　　1)阅读有关硬件设备类型所合适的虚拟设备的说明文档。
　　2)对目标设备进行虚拟化设计，以决定目标VxD的专用部分设计。
　　3)建立总体框架，这部分工作包括：DDB，DCP、Service Table以及空API过程的定义，构造VxD的5个段，从而建起一个VxD的框架。
　　4)编写初始化代码：设计实模式和保护模式初始化过程代码和数据。
　　5)编写VxD所需的控制模块、虚拟设备服务和API函数。
　　6)编写模块化定义的文件，此文件包括有该虚拟设备的名称和设备所需的描述块。
　　7)编译并链接设备。
　　8)使用Windows95环境下的调试器来测试虚拟设备，并阅读有关如何调试虚拟设备的文档。
　　9)为虚拟设备创建安装文件(*.INF)和相关的文件。将VxD载入Windows，可通过在注册表中作一些项目的登记，然后把文件拷贝到Windows的系统目录或相关的目录下。
3.2 实例
　　我在开发局域网共享Modem软件Modem Proxy中，用98DDK，VC++6.0，MASM6.11开发了基于NDIS的协议驱动程序ZPacket.vxd。该协议驱动程序遵循NDIS规范向上层应用提供设置网卡接收模式，收、发以太帧等服务。具体的结构框架如图2所示。

图2　ModemProxy结构图
　　说明：
　　(1)Modem Proxy使用CreateFile系统函数将ZPacket.vxd动态装入系统。
　　(2)将ZPacket.vxd分别绑定于网卡和拨号网络适配器。
　　(3)将网卡的接收模式设置为PROMISCUOUS模式，以监听以太网上的所有数据包。
　　(4)Modem Proxy通过ZPacket.vxd获取局域网上的以太帧，进行必要的协议处理后，再通过ZPacket.vxd经拨号网络转发至Internet。
　　(5)Modem Proxy通过ZPacket.vxd获取Internet的数据包，进行必要的协议处理后，再通过ZPacket.vxd经网卡转发至局域网。
赫江华（武汉大学数学与计算机科学学院 武汉 430072）　
熊莺（武汉大学数学与计算机科学学院 武汉 430072）　
韦峰（武汉大学数学与计算机科学学院 武汉 430072）　
周一勤（武汉大学数学与计算机科学学院 武汉 430072）
参考文献
1，徐志海等. Win95下利用VxD访问物理地址. 微计算机应用, Vol.19, No.3 May l998
2，魏晋鹏等. Windows深入剖析棾跏蓟 北京：清华大学出版社, 1997
3，美Matt Pietrek着, 米 东, 王 森等译. Windows95系统编程奥秘. 北京：电子工业出版社, 1996年8月
收稿日期：1999年6月28日
